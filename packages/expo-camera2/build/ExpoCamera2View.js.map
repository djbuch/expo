{"version":3,"file":"ExpoCamera2View.js","sourceRoot":"","sources":["../src/ExpoCamera2View.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react'\nimport { findNodeHandle, ViewProps } from 'react-native';\n\nimport {\n  TakingPictureOptions,\n  Picture,\n  VideoRecordingOptions,\n  Video,\n  FocusPoint,\n  Facing,\n  FlashMode,\n  Autofocus,\n  WhiteBalance,\n  MountError,\n} from './ExpoCamera2.types';\n\nimport ExpoNativeCameraView from './ExpoCamera2NativeView';\nimport ExpoCamera2ViewManager from './ExpoCamera2NativeViewManager';\n\nimport UnavailabilityError from './UnavailabilityError';\n\ninterface ExpoCamera2ViewProps extends ViewProps {\n  /**\n   * State of camera autofocus.\n   * @default Autofocus.Off\n   */\n  autofocus?: Autofocus;\n\n  /**\n   * Camera facing.\n   * @default Facing.Back\n   */\n  facing?: Facing;\n\n  /**\n   * Camera flash mode.\n   * @default FlashMode.Off\n   */\n  flashMode?: FlashMode;\n\n  /**\n   * Distance to plane of sharpest focus.\n   * Value between `0.0` and `1.0`.\n   * `0.0` - infinity focus.\n   * `1.0` - focus as close as possible.\n   * @Android This is available only for some devices.\n   * @default 0.0\n   */\n  focusDepth?: number;\n\n  /**\n   * Camera white balance.\n   * @default WhiteBalance.Auto\n   */\n  whiteBalance?: WhiteBalance;\n\n  /**\n   * Value between `0.0` and `1.0` being a percentage of device's max zoom.\n   * `0.0` - not zoomed.\n   * `1.0` - maximum zoom.\n   * @default 0.0\n   */\n  zoom?: number;\n\n  /**\n   * Callback invoked when camera preview has been set.\n   */\n  onCameraReady?: () => void;\n\n  /**\n   * Callback invoked when camera preview could not been started.\n   */\n  onMountError?: (error: MountError) => void;\n}\n\n/**\n * TODO: ensure MVP example is working one!\n * Example:\n * ```ts\n * import * as React from 'react';\n * import { View, Test, StyleSheet } from 'react-native';\n * import * as Camera from 'um-camera';\n *\n * interface State {\n *   permissionsGranted?: boolean;\n *   takingPhoto: boolean;\n *   takenPicture?: any;\n * }\n *\n * class CameraComponent extends React.Component<{}, State> {\n *   readonly state: State = {\n *     takingPhoto: false;\n *   };\n *\n *   componentDidMount() {\n *     this.askForPermissions();\n *   }\n *\n *   async askForPermissions() {\n *     const { status } = await Permissions.askAsync(Permissions.CAMERA);\n *     this.setState({ permissionsGranted: status === Permissions.Granted });\n *   }\n *\n *   async handleTakingPhoto() {\n *   }\n *\n *   render () {\n *     const { permissionsGranted } = this.state;\n *     if (!permissionsGranted) {\n *        return (\n *          <View style={styles.container}>\n *          </View>\n *        )\n *     }\n *\n *     return (\n *       <View styles={{ flex: 1 }}>\n *         <Camera.View styles={{ flex: 1 }}/>\n *         <View styles={{ }}>\n *           <Button onPress={this.handleTakingPhoto}/>\n *         </View>\n *       <View/>\n *     )\n *   }\n * }\n *\n * const styles = StyleSheet.create({\n *   container: {\n *     flex: 1,\n *   },\n *   cameraView: {\n *   },\n *   optionsView: {\n *   },\n *   takingPictureButton: {\n *   },\n * });\n * ```\n */\nexport default class ExpoCamera2View extends React.Component<ExpoCamera2ViewProps> {\n  static defaultProps = {\n    autofocus: Autofocus.Off,\n    facing: Facing.Back,\n    flashMode: FlashMode.Off,\n    focusDepth: 0.0,\n    whiteBalance: WhiteBalance.Auto,\n    zoom: 0.0,\n    onCameraReady: () => {},\n    onMountError: () => {},\n  }\n\n  /**\n   * Native node handle that is used to invoke methods on ViewManager.\n   */\n  cameraNodeHandle?: number;\n\n  /**\n   * Pauses the camera view.\n   * TODO: is any operation permitted in this state?\n   */\n  @ensureAvailable\n  pausePreviewAsync(): Promise<void> {\n    return ExpoCamera2ViewManager.pausePreviewAsync(this.cameraNodeHandle);\n  }\n\n  /**\n   * Resumes previously pasued preview.\n   */\n  @ensureAvailable\n  resumePreviewAsync(): Promise<void> {\n    return ExpoCamera2ViewManager.resumePreviewAsync(this.cameraNodeHandle);\n  }\n\n  /**\n   * Takes a picture and saves it to app's cache directory.\n   * Photos are rotated to match device's orientation (on Android only if **options.skipProcessing** flag is not enabled) and scaled to match the preview.\n   * TODO: Anyway on Android it is essential to set ratio prop to get a picture with correct dimensions.\n   *\n   * > Resulting local image URI is temporary.\n   * > Use **Expo.FileSystem.copyAsync** to make a permanent copy of the image.\n   */\n  @ensureAvailable\n  takePictureAsync(options: TakingPictureOptions = {}): Promise<Picture> {\n    return ExpoCamera2ViewManager.takePictureAsync(options, this.cameraNodeHandle);\n  }\n\n  /**\n   * Starts recording a video that will be saved to cache directory.\n   * Videos are rotated to match device's orientation.\n   * Resulting promise is returned either if:\n   * - **stopRecording** method was invoked\n   * - one of **maxDuration** aor **maxFileSize** is reached\n   * - TODO: or camera preview is stopped (what about **pausePreviewAsync** method?)\n   *\n   * TODO: Flipping camera during a recording results in stopping it?\n   *\n   * > Resulting video URI is temporary.\n   * > Use **Expo.FileSystem.copyAsync** to make a permanent copy of the video.\n   */\n  @ensureAvailable\n  recordAsync(options: VideoRecordingOptions = {}): Promise<Video> {\n    return ExpoCamera2ViewManager.recordAsync(options, this.cameraNodeHandle);\n  }\n\n  /**\n   * Stops recording if any is in progress.\n   */\n  @ensureAvailable\n  stopRecordingAsync(): Promise<void> {\n    return ExpoCamera2ViewManager.stopRecordingAsync(this.cameraNodeHandle);\n  }\n\n  /**\n   * Get aspect ratios that are supported by the device.\n   * @Android only\n   */\n  @ensureAvailable\n  getAvailableRatiosAsync(): Promise<string[]> {\n    return ExpoCamera2ViewManager.getAvailableRatiosAsync(this.cameraNodeHandle);\n  }\n\n  /**\n   * Get picture sizes that are supported by the device for given ratio.\n   * Returned list varies across **Android** devices but is the same for every **iOS**.\n   */\n  @ensureAvailable\n  getAvailablePictureSizesAsync(ratio: string): Promise<string[]> {\n    return ExpoCamera2ViewManager.getAvailablePictureSizesAsync(ratio, this.cameraNodeHandle);\n  }\n\n  /**\n   * Tries to focus camera device on given point.\n   * Efect is temporary and upon any device movement might be discarded.\n   */\n  @ensureAvailable\n  focusOnPoint(previewFocusPoint: FocusPoint): Promise<boolean> {\n    return ExpoCamera2ViewManager.focusOnPoint(previewFocusPoint, this.cameraNodeHandle);\n  }\n\n  setNativeReference(ref: React.Component | null) {\n    if (ref) {\n      const cameraNodeHandle = findNodeHandle(ref)\n      if (cameraNodeHandle) {\n        this.cameraNodeHandle = cameraNodeHandle\n      }\n    } else {\n      this.cameraNodeHandle = undefined;\n    }\n  }\n\n  render() {\n    return (\n      <ExpoNativeCameraView\n        {...this.props}\n        ref={this.setNativeReference}\n      />\n    )\n  }\n}\n\nfunction ensureAvailable<T extends Function>(\n  target: Object,\n  propertyName: keyof typeof ExpoCamera2ViewManager,\n  descriptor: TypedPropertyDescriptor<T>,\n) {\n  const method = descriptor.value;\n  // @ts-ignore\n  descriptor.value = function(...args: any[]) {\n    if (!ExpoCamera2ViewManager[propertyName]) {\n      throw new UnavailabilityError('Camera', propertyName);\n    }\n    return method!.apply(this, args);\n  }\n  return descriptor;\n}\n"]}