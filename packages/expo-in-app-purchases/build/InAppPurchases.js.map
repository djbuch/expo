{"version":3,"file":"InAppPurchases.js","sourceRoot":"","sources":["../src/InAppPurchases.ts"],"names":[],"mappings":"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","sourcesContent":["import { CodedError, EventEmitter, Subscription } from '@unimodules/core';\nimport ExpoInAppPurchases from './ExpoInAppPurchases';\nimport { Platform } from 'react-native';\nimport {\n  ValidItemType,\n  QueryResponse\n} from './InAppPurchases.types';\nexport { default as ExpoInAppPurchasesView } from './ExpoInAppPurchasesView';\n\nconst events = {\n  PURCHASES_UPDATED: 'Purchases Updated',\n  ITEM_ACKNOWLEDGED: 'Item Acknowledged',\n}\nconst validTypes = {\n  INAPP: 'inapp',\n  SUBS: 'subs',\n}\nconst billingResponseCodes = ExpoInAppPurchases.responseCodes;\nconst purchaseStates = ExpoInAppPurchases.purchaseStates;\n\nexport const constants = {\n  events,\n  billingResponseCodes,\n  purchaseStates,\n  validTypes,\n}\n\nlet connected = false;\nlet purchasesUpdateSubscription: Subscription;\nlet itemAcknowledgedSubscription: Subscription;\nconst eventEmitter = new EventEmitter(ExpoInAppPurchases);\n\nexport async function connectToAppStoreAsync(): Promise<QueryResponse> {\n  console.log('calling connectToAppStoreAsync from TS');\n  if (connected) {\n    throw new ConnectionError('Already connected to App Store');\n  }\n\n  connected = true;\n  const response = await ExpoInAppPurchases.connectToAppStoreAsync();\n  return convertStringsToObjects(response);\n}\n\nexport async function queryPurchasableItemsAsync(itemList: string[], itemType?: ValidItemType): Promise<QueryResponse> {\n  console.log('calling queryPurchasableItemsAsync from TS');\n  if (!connected) {\n    throw new ConnectionError('Must be connected to App Store');\n  }\n\n  if (Platform.OS === 'ios') {\n    const response = ExpoInAppPurchases.queryPurchasableItemsAsync(itemList);\n    return response;\n  }\n  const response = await ExpoInAppPurchases.queryPurchasableItemsAsync(itemType, itemList);\n  return convertStringsToObjects(response);\n}\n\nexport async function queryPurchaseHistoryAsync(refresh?: boolean, itemType?: ValidItemType): Promise<QueryResponse> {\n  console.log('calling queryPurchaseHistoryAsync from TS');\n  if (!connected) {\n    throw new ConnectionError('Must be connected to App Store');\n  }\n  if (refresh && !itemType) {\n    throw new Error('Must define item type if querying updated history');\n  }\n  const history = await ExpoInAppPurchases.queryPurchaseHistoryAsync(refresh ? itemType : null);\n  return convertStringsToObjects(history);\n}\n\nexport async function purchaseItemAsync(itemId: string, oldItem?: string): Promise<void> {\n  console.log('calling purchaseItemAsync from TS');\n  if (!connected) {\n    throw new ConnectionError('Must be connected to App Store');\n  }\n\n  return await ExpoInAppPurchases.initiatePurchaseFlowAsync(itemId, oldItem);\n}\n\nexport async function acknowledgePurchaseAsync(purchaseToken: string, consumeItem: boolean): Promise<void> {\n  console.log('calling acknowledgePurchaseAsync from TS');\n  if (!connected) {\n    throw new ConnectionError('Must be connected to App Store');\n  }\n\n  if (consumeItem) {\n    console.log('Consuming...');\n    return await ExpoInAppPurchases.consumeAsync(purchaseToken);\n  }\n  console.log('Acknowledging...');\n  return await ExpoInAppPurchases.acknowledgePurchaseAsync(purchaseToken);\n}\n\nexport function setPurchaseListener(eventName: string, callback: (result) => void): void {\n  if (eventName === events.PURCHASES_UPDATED) {\n    if (purchasesUpdateSubscription) {\n      purchasesUpdateSubscription.remove();\n    }\n\n    purchasesUpdateSubscription = eventEmitter.addListener<QueryResponse>(eventName, result => {\n      callback(convertStringsToObjects(result));\n    });\n  } else if (eventName === events.ITEM_ACKNOWLEDGED) {\n    if (itemAcknowledgedSubscription) {\n      itemAcknowledgedSubscription.remove();\n    }\n    itemAcknowledgedSubscription = eventEmitter.addListener<number>(eventName, callback);\n  }\n}\n\nexport async function getBillingResponseCodeAsync(): Promise<number> {\n  if (!connected) {\n    return billingResponseCodes.SERVICE_DISCONNECTED;\n  }\n\n  return await ExpoInAppPurchases.getBillingResponseCodeAsync();\n}\n\nexport async function disconnectAsync(): Promise<void> {\n  console.log('calling disconnectAsync from TS');\n  if (!connected) {\n    throw new ConnectionError('Already disconnected from App Store');\n  }\n  connected = false;\n\n  for(const key in events) {\n    console.log('Removing listeners for ' + events[key]);\n    eventEmitter.removeAllListeners(events[key]);\n  }\n\n  return await ExpoInAppPurchases.disconnectAsync();\n}\n\nfunction convertStringsToObjects(response : any) {\n  const { responseCode, results: jsonStrings } = response;\n  const results = jsonStrings ? jsonStrings.map(string => JSON.parse(string)) : [];\n  return { responseCode, results };\n}\n\nclass ConnectionError extends CodedError {\n  constructor(message: string) {\n    super('ERR_Connection', message);\n  }\n}"]}