{"version":3,"file":"InAppPurchases.js","sourceRoot":"","sources":["../src/InAppPurchases.ts"],"names":[],"mappings":"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","sourcesContent":["import { CodedError } from '@unimodules/core';\nimport ExpoInAppPurchases from './ExpoInAppPurchases';\nimport { Platform } from 'react-native';\nimport {\n  ValidItemType,\n  QueryResponse\n} from './InAppPurchases.types';\nexport { default as ExpoInAppPurchasesView } from './ExpoInAppPurchasesView';\n\nconst validTypes = {\n  INAPP: 'inapp',\n  SUBS: 'subs',\n}\nconst billingResponseCodes = ExpoInAppPurchases.responseCodes;\nconst purchaseStates = ExpoInAppPurchases.purchaseStates;\n\nexport const constants = {\n  billingResponseCodes,\n  purchaseStates,\n  validTypes,\n}\n\nlet connected = false;\n\nexport async function connectToAppStoreAsync(): Promise<QueryResponse> {\n  console.log('calling connectToAppStoreAsync from TS');\n  if (connected) {\n    throw new ConnectionError('Already connected to App Store');\n  }\n\n  connected = true;\n  return await ExpoInAppPurchases.connectToAppStoreAsync();\n}\n\nexport async function queryPurchasableItemsAsync(itemList: string[]): Promise<QueryResponse> {\n  console.log('calling queryPurchasableItemsAsync from TS');\n  if (!connected) {\n    throw new ConnectionError('Must be connected to App Store');\n  }\n  if (Platform.OS === 'android') {\n    // On Android you have to pass in the item type so we will combine the results of both inapp and subs\n    const { responseCode, results } = await ExpoInAppPurchases.queryPurchasableItemsAsync(validTypes.INAPP, itemList);\n    if (responseCode == billingResponseCodes.OK) {\n      const subs = await ExpoInAppPurchases.queryPurchasableItemsAsync(validTypes.SUBS, itemList);\n      subs.results.forEach(result => {\n        results.push(result);\n      });\n    }\n    return { responseCode, results };\n  }\n\n  return await ExpoInAppPurchases.queryPurchasableItemsAsync(itemList);\n}\n\nexport async function queryPurchaseHistoryAsync(refresh?: boolean): Promise<QueryResponse> {\n  console.log('calling queryPurchaseHistoryAsync from TS');\n  if (!connected) {\n    throw new ConnectionError('Must be connected to App Store');\n  }\n  if (refresh && Platform.OS === 'android') {\n    const { responseCode, results } = await ExpoInAppPurchases.queryPurchaseHistoryAsync(validTypes.INAPP);\n    if (responseCode === billingResponseCodes.OK) {\n      const subs = await await ExpoInAppPurchases.queryPurchaseHistoryAsync(validTypes.SUBS);\n      subs.results.forEach(result => {\n        results.push(result);\n      });\n    }\n    return { responseCode, results};\n  }\n  return await ExpoInAppPurchases.queryPurchaseHistoryAsync(null);\n}\n\nexport async function purchaseItemAsync(itemId: string, oldItem?: string): Promise<QueryResponse> {\n  console.log('calling purchaseItemAsync from TS');\n  if (!connected) {\n    throw new ConnectionError('Must be connected to App Store');\n  }\n\n  return await ExpoInAppPurchases.purchaseItemAsync(itemId, oldItem);\n}\n\nexport async function acknowledgePurchaseAsync(purchaseToken: string, consumeItem: boolean): Promise<void> {\n  if (Platform.OS !== 'android') return;\n  console.log('calling acknowledgePurchaseAsync from TS');\n  if (!connected) {\n    throw new ConnectionError('Must be connected to App Store');\n  }\n\n  if (consumeItem) {\n    console.log('Consuming...');\n    return await ExpoInAppPurchases.consumeAsync(purchaseToken);\n  }\n  console.log('Acknowledging...');\n  return await ExpoInAppPurchases.acknowledgePurchaseAsync(purchaseToken);\n}\n\nexport async function getBillingResponseCodeAsync(): Promise<number> {\n  if (!connected) {\n    return billingResponseCodes.SERVICE_DISCONNECTED;\n  }\n  if (Platform.OS !== 'android') {\n    return billingResponseCodes.OK;\n  }\n\n  return await ExpoInAppPurchases.getBillingResponseCodeAsync();\n}\n\nexport async function disconnectAsync(): Promise<void> {\n  console.log('calling disconnectAsync from TS');\n  if (!connected) {\n    throw new ConnectionError('Already disconnected from App Store');\n  }\n  connected = false;\n  return await ExpoInAppPurchases.disconnectAsync();\n}\n\nclass ConnectionError extends CodedError {\n  constructor(message: string) {\n    super('ERR_Connection', message);\n  }\n}"]}