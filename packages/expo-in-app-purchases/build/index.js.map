{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,kBAAkB,EAAE,MAAM,kBAAkB,CAAC;AAEtD,MAAM,EAAE,kBAAkB,EAAE,GAAG,kBAAkB,CAAC;AAElD,OAAO,EAAE,OAAO,IAAI,sBAAsB,EAAE,MAAM,0BAA0B,CAAC;AAE7E,MAAM,WAAW,GAAa,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;AAEhD,IAAI,SAAS,GAAG,KAAK,CAAC;AAEtB,MAAM,CAAC,KAAK,UAAU,sBAAsB;IAC1C,OAAO,CAAC,GAAG,CAAC,wCAAwC,CAAC,CAAC;IACtD,IAAI,SAAS,EAAE;QACb,MAAM,IAAI,KAAK,CAAC,uBAAuB,CAAC,CAAC;KAC1C;IAED,SAAS,GAAG,IAAI,CAAC;IACjB,MAAM,QAAQ,GAAG,MAAM,kBAAkB,CAAC,sBAAsB,EAAE,CAAC;IACnE,OAAO,uBAAuB,CAAC,QAAQ,CAAC,CAAC;AAC3C,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,0BAA0B,CAAC,QAAgB,EAAE,QAAkB;IACnF,OAAO,CAAC,GAAG,CAAC,4CAA4C,CAAC,CAAC;IAC1D,IAAI,CAAC,SAAS,EAAE;QACd,MAAM,IAAI,KAAK,CAAC,kCAAkC,CAAC,CAAC;KACrD;IACD,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE;QACnC,MAAM,IAAI,KAAK,CAAC,eAAe,CAAC,CAAC;KAClC;IACD,MAAM,QAAQ,GAAG,MAAM,kBAAkB,CAAC,0BAA0B,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;IACzF,OAAO,uBAAuB,CAAC,QAAQ,CAAC,CAAC;AAC3C,CAAC;AAED,SAAS,uBAAuB,CAAC,QAAc;IAC7C,MAAM,EAAE,YAAY,EAAE,OAAO,EAAE,WAAW,EAAE,GAAG,QAAQ,CAAC;IACxD,MAAM,OAAO,GAAG,WAAW,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;IAC9D,OAAO,EAAE,YAAY,EAAE,OAAO,EAAE,CAAC;AACnC,CAAC","sourcesContent":["import { NativeModulesProxy } from '@unimodules/core';\n\nconst { ExpoInAppPurchases } = NativeModulesProxy;\n\nexport { default as ExpoInAppPurchasesView } from './ExpoInAppPurchasesView';\n\nconst VALID_TYPES: string[] = ['subs', 'inapp'];\n\nlet connected = false;\n\nexport async function connectToAppStoreAsync(): Promise<any> {\n  console.log('calling connectToAppStoreAsync from TS');\n  if (connected) {\n    throw new Error('Cannot connect twice!');\n  }\n\n  connected = true;\n  const response = await ExpoInAppPurchases.connectToAppStoreAsync();\n  return convertStringsToObjects(response);\n}\n\nexport async function queryPurchasableItemsAsync(itemType: string, itemList: string[]): Promise<any> {\n  console.log('calling queryPurchasableItemsAsync from TS');\n  if (!connected) {\n    throw new Error('Must connect to app store first!');\n  }\n  if (!VALID_TYPES.includes(itemType)) {\n    throw new Error('Invalid type!');\n  }\n  const response = await ExpoInAppPurchases.queryPurchasableItemsAsync(itemType, itemList);\n  return convertStringsToObjects(response);\n}\n\nfunction convertStringsToObjects(response : any) {\n  const { responseCode, results: jsonStrings } = response;\n  const results = jsonStrings.map(string => JSON.parse(string));\n  return { responseCode, results };\n}\n"]}