{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { NativeModulesProxy, CodedError, EventEmitter } from '@unimodules/core';\nconst { ExpoInAppPurchases } = NativeModulesProxy;\n\nexport { default as ExpoInAppPurchasesView } from './ExpoInAppPurchasesView';\n\ntype ValidItemType = 'inapp' | 'subs';\ninterface QueryResponse {\n  responseCode: Number,\n  results: Array<object>,\n}\n\nlet connected = false;\nconst eventEmitter = new EventEmitter(ExpoInAppPurchases);\n\nexport async function connectToAppStoreAsync(): Promise<QueryResponse> {\n  console.log('calling connectToAppStoreAsync from TS');\n  if (connected) {\n    throw new ConnectionError('Already connected to App Store');\n  }\n\n  connected = true;\n  const response = await ExpoInAppPurchases.connectToAppStoreAsync();\n  return convertStringsToObjects(response);\n}\n\nexport async function queryPurchasableItemsAsync(itemType: ValidItemType, itemList: string[]): Promise<QueryResponse> {\n  console.log('calling queryPurchasableItemsAsync from TS');\n  if (!connected) {\n    throw new ConnectionError('Must be connected to App Store');\n  }\n\n  const response = await ExpoInAppPurchases.queryPurchasableItemsAsync(itemType, itemList);\n  return convertStringsToObjects(response);\n}\n\nexport async function initiatePurchaseFlowAsync(itemId: String, oldItem?: String): Promise<void> {\n  console.log('calling initiatePurchaseFlowAsync from TS');\n  if (!connected) {\n    throw new ConnectionError('Must be connected to App Store');\n  }\n\n  return await ExpoInAppPurchases.initiatePurchaseFlowAsync(itemId, oldItem);\n}\n\nexport async function acknowledgePurchaseAsync(purchaseToken: string): Promise<Number> {\n  console.log('calling acknowledgePurchaseAsync from TS');\n  if (!connected) {\n    throw new ConnectionError('Must be connected to App Store');\n  }\n\n  await ExpoInAppPurchases.acknowledgePurchaseAsync(purchaseToken);\n  // Set a listener that resolves the promise when it gets the response back from the native code\n\n  console.log('Adding listener...');\n  const eventName = 'purchaseAcknowledged';\n  return await getAcknowledgePurchaseResponse(eventName);\n}\n\nasync function getAcknowledgePurchaseResponse(eventName: string): Promise<Number> {\n  return new Promise(resolve => {\n    eventEmitter.addListener(eventName, res => {\n      const jsonString = JSON.stringify(res);\n      const result = JSON.parse(jsonString);\n  \n      eventEmitter.removeAllListeners(eventName);\n      resolve(result.responseCode);\n    })\n  });\n}\n\nexport async function disconnectAsync(): Promise<void> {\n  console.log('calling disconnectAsync from TS');\n  if (!connected) {\n    throw new ConnectionError('Already disconnected from App Store');\n  }\n  connected = false;\n\n  return await ExpoInAppPurchases.disconnectAsync();\n}\n\nexport async function getBillingResponseCodeAsync(): Promise<Number> {\n  if (!connected) {\n    return -1;\n  }\n\n  return await ExpoInAppPurchases.getBillingResponseCodeAsync();\n}\n\nfunction convertStringsToObjects(response : any) {\n  const { responseCode, results: jsonStrings } = response;\n  const results = jsonStrings.map(string => JSON.parse(string));\n  return { responseCode, results };\n}\n\nclass ConnectionError extends CodedError {\n  constructor(message: string) {\n    super('ERR_Connection', message);\n  }\n}"]}