{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,kBAAkB,EAAE,MAAM,kBAAkB,CAAC;AAEtD,MAAM,EAAE,kBAAkB,EAAE,GAAG,kBAAkB,CAAC;AAElD,OAAO,EAAE,OAAO,IAAI,sBAAsB,EAAE,MAAM,0BAA0B,CAAC;AAE7E,MAAM,WAAW,GAAa,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;AAEhD,MAAM,CAAC,KAAK,UAAU,0BAA0B,CAAC,QAAgB,EAAE,QAAkB;IACnF,OAAO,CAAC,GAAG,CAAC,4CAA4C,CAAC,CAAC;IAC1D,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE;QACnC,OAAO,IAAI,KAAK,CAAC,eAAe,CAAC,CAAC;KACnC;IACD,OAAO,MAAM,kBAAkB,CAAC,0BAA0B,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;AACjF,CAAC","sourcesContent":["import { NativeModulesProxy } from '@unimodules/core';\n\nconst { ExpoInAppPurchases } = NativeModulesProxy;\n\nexport { default as ExpoInAppPurchasesView } from './ExpoInAppPurchasesView';\n\nconst VALID_TYPES: string[] = ['subs', 'inapp'];\n\nexport async function queryPurchasableItemsAsync(itemType: string, itemList: string[]): Promise<any> {\n  console.log('calling queryPurchasableItemsAsync from TS');\n  if (!VALID_TYPES.includes(itemType)) {\n    return new Error('Invalid type!');\n  }\n  return await ExpoInAppPurchases.queryPurchasableItemsAsync(itemType, itemList);\n}\n"]}