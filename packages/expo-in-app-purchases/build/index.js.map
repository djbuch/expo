{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,kBAAkB,EAAE,MAAM,kBAAkB,CAAC;AAEtD,MAAM,EAAE,kBAAkB,EAAE,GAAG,kBAAkB,CAAC;AAElD,OAAO,EAAE,OAAO,IAAI,sBAAsB,EAAE,MAAM,0BAA0B,CAAC;AAQ7E,IAAI,SAAS,GAAG,KAAK,CAAC;AAEtB,MAAM,CAAC,KAAK,UAAU,sBAAsB;IAC1C,OAAO,CAAC,GAAG,CAAC,wCAAwC,CAAC,CAAC;IACtD,IAAI,SAAS,EAAE;QACb,MAAM,IAAI,KAAK,CAAC,uBAAuB,CAAC,CAAC;KAC1C;IAED,SAAS,GAAG,IAAI,CAAC;IACjB,MAAM,QAAQ,GAAG,MAAM,kBAAkB,CAAC,sBAAsB,EAAE,CAAC;IACnE,OAAO,uBAAuB,CAAC,QAAQ,CAAC,CAAC;AAC3C,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,0BAA0B,CAAC,QAAuB,EAAE,QAAkB;IAC1F,OAAO,CAAC,GAAG,CAAC,4CAA4C,CAAC,CAAC;IAC1D,IAAI,CAAC,SAAS,EAAE;QACd,MAAM,IAAI,KAAK,CAAC,kCAAkC,CAAC,CAAC;KACrD;IAED,MAAM,QAAQ,GAAG,MAAM,kBAAkB,CAAC,0BAA0B,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;IACzF,OAAO,uBAAuB,CAAC,QAAQ,CAAC,CAAC;AAC3C,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,yBAAyB,CAAC,MAAc,EAAE,OAAgB;IAC9E,OAAO,CAAC,GAAG,CAAC,2CAA2C,CAAC,CAAC;IACzD,IAAI,CAAC,SAAS,EAAE;QACd,MAAM,IAAI,KAAK,CAAC,oBAAoB,CAAC,CAAC;KACvC;IAED,OAAO,MAAM,kBAAkB,CAAC,yBAAyB,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;AAC7E,CAAC;AAED,SAAS,uBAAuB,CAAC,QAAc;IAC7C,MAAM,EAAE,YAAY,EAAE,OAAO,EAAE,WAAW,EAAE,GAAG,QAAQ,CAAC;IACxD,MAAM,OAAO,GAAG,WAAW,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;IAC9D,OAAO,EAAE,YAAY,EAAE,OAAO,EAAE,CAAC;AACnC,CAAC","sourcesContent":["import { NativeModulesProxy } from '@unimodules/core';\n\nconst { ExpoInAppPurchases } = NativeModulesProxy;\n\nexport { default as ExpoInAppPurchasesView } from './ExpoInAppPurchasesView';\n\ntype ValidItemType = 'inapp' | 'subs';\ninterface QueryResponse {\n  responseCode: Number,\n  results: Array<object>,\n}\n\nlet connected = false;\n\nexport async function connectToAppStoreAsync(): Promise<QueryResponse> {\n  console.log('calling connectToAppStoreAsync from TS');\n  if (connected) {\n    throw new Error('Cannot connect twice!');\n  }\n\n  connected = true;\n  const response = await ExpoInAppPurchases.connectToAppStoreAsync();\n  return convertStringsToObjects(response);\n}\n\nexport async function queryPurchasableItemsAsync(itemType: ValidItemType, itemList: string[]): Promise<QueryResponse> {\n  console.log('calling queryPurchasableItemsAsync from TS');\n  if (!connected) {\n    throw new Error('Must connect to app store first!');\n  }\n\n  const response = await ExpoInAppPurchases.queryPurchasableItemsAsync(itemType, itemList);\n  return convertStringsToObjects(response);\n}\n\nexport async function initiatePurchaseFlowAsync(itemId: String, oldItem?: String): Promise<void> {\n  console.log('calling initiatePurchaseFlowAsync from TS');\n  if (!connected) {\n    throw new Error('Must be connected!');\n  }\n\n  return await ExpoInAppPurchases.initiatePurchaseFlowAsync(itemId, oldItem);\n}\n\nfunction convertStringsToObjects(response : any) {\n  const { responseCode, results: jsonStrings } = response;\n  const results = jsonStrings.map(string => JSON.parse(string));\n  return { responseCode, results };\n}\n"]}